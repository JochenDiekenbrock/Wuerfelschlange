{"version":3,"sources":["WuerfelInput.tsx","WuerfelView.tsx","WuerfelLine.tsx","Wuerfel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WuerfelInput","initialValue","onNumberOfDicesEntered","useState","numberOfDices","setNumberOfDices","onEnter","e","preventDefault","onSubmit","style","marginRight","value","onChange","newValue","target","onClick","numberToDice","eyes","WuerfelView","dicesData","dices","map","index","key","marginLeft","title","String","hightlighed","Provider","size","color","numberToStyledDice","highlighted","undefined","matched","WuerfelLine","lineTitle","className","calculateHighlighted","result","fill","length","pos","Wuerfel","setDicesData","calculateInitialDices","newDices","numberOfDice","dice","i","push","Math","floor","random","rollDice","useEffect","data","startValue","originalHighlights","highlights","lastIndexOf","calculateFurtherLine","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d05fa66e.chunk.js","sourcesContent":["import React, {SyntheticEvent, useState} from 'react';\n\nconst MAX_NUMBER_OF_DICES = 100;\ninterface WuerfelInputProps {\n    initialValue: number\n    onNumberOfDicesEntered: (numberOfDices: number) => void;\n}\n\nexport const WuerfelInput: React.FC<WuerfelInputProps> = ({initialValue, onNumberOfDicesEntered}) => {\n    const [numberOfDices, setNumberOfDices] = useState(initialValue);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = +e.target.value;\n        if (newValue <= MAX_NUMBER_OF_DICES) {\n            setNumberOfDices(newValue);\n        }\n        e.preventDefault()\n    };\n\n    const onEnter = (e: React.SyntheticEvent) => {\n        onNumberOfDicesEntered(numberOfDices);\n        e.preventDefault();\n    };\n\n    return <form onSubmit={onEnter}>\n        <label>Wie viele Würfel möchtest Du? <input style={{marginRight: \"1em\"}} value={numberOfDices > 0 ? numberOfDices : ''} onChange={onChange}/></label>\n        <button onClick={onEnter}>Würfeln</button>\n    </form>\n};\n","import React from 'react';\nimport {IconContext} from \"react-icons\";\nimport {\n    GiPerspectiveDiceSixFacesRandom,\n    GiThumbUp,\n    GiThumbDown,\n    GiDiceSixFacesOne,\n    GiDiceSixFacesTwo,\n    GiDiceSixFacesThree,\n    GiDiceSixFacesFour,\n    GiDiceSixFacesFive,\n    GiDiceSixFacesSix\n} from \"react-icons/gi\";\nimport {DicesData} from \"./Wuerfel\";\n\ninterface WuerfelViewProps {\n    dicesData: DicesData;\n}\n\nconst numberToStyledDice = (eyes: number, hightlighed: boolean) => {\n    return <IconContext.Provider\n        value={{\n            size: \"2em\",\n            style: {color: hightlighed ? \"red\" : \"darkblue\"}\n        }}>{numberToDice(eyes)}</IconContext.Provider>\n};\n\nconst numberToDice = (eyes: number) => {\n    switch (eyes) {\n        case 1:\n            return <GiDiceSixFacesOne/>;\n        case 2:\n            return <GiDiceSixFacesTwo/>;\n        case 3:\n            return <GiDiceSixFacesThree/>;\n        case 4:\n            return <GiDiceSixFacesFour/>;\n        case 5:\n            return <GiDiceSixFacesFive/>;\n        case 6:\n            return <GiDiceSixFacesSix/>;\n        default:\n            return <GiPerspectiveDiceSixFacesRandom/>\n    }\n};\n\n\nexport const WuerfelView: React.FC<WuerfelViewProps> = ({dicesData}) => {\n    return <div>\n        {dicesData.dices.map((eyes, index) => {\n            return <span key={index}>\n            {index > 0 && index % 10 === 0 ? <span style={{marginLeft: \"1em\"}}/> : <></>}\n                <span title={String(eyes)}>{numberToStyledDice(eyes, dicesData.highlighted[index])}</span></span>\n        })}\n        {dicesData.matched !== undefined &&\n        <IconContext.Provider\n            value={{\n                size: \"2em\",\n                style: {color: dicesData.matched ? \"green\" : \"red\"}\n            }}><span style={{marginLeft: \"1em\"}}>\n            {dicesData.matched ? <GiThumbUp/> : <GiThumbDown/>}\n            </span>\n        </IconContext.Provider>}\n    </div>;\n};\n","import React from 'react';\nimport './App.css';\nimport {WuerfelView} from \"./WuerfelView\";\nimport {DicesData} from \"./Wuerfel\";\n\ninterface WuerfelLineProps {\n    lineTitle: string;\n    dicesData: DicesData;\n}\n\nexport const WuerfelLine: React.FC<WuerfelLineProps> = ({lineTitle, dicesData}) => {\n    return (\n        <div className={\"wuerfel-line\"}>\n            <span className={\"line-heading\"}>{lineTitle}</span>\n            <WuerfelView dicesData={dicesData}/>\n        </div>\n    );\n};\n\nexport default WuerfelLine;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {WuerfelInput} from \"./WuerfelInput\";\nimport WuerfelLine from \"./WuerfelLine\";\n\nconst INITIAL_NUMBER_OF_DICES = 40;\n\nexport interface DicesData {\n    dices: number[];\n    highlighted: boolean[];\n    matched?: boolean;\n}\n\nconst getRandomEyes: () => number = () => Math.floor(Math.random() * 6 + 1);\nconst rollDice: (numberOfDice: number) => number[] = (numberOfDice) => {\n    const dice: number[] = [];\n    for (let i = 0; i < numberOfDice; i++) {\n        dice.push(getRandomEyes());\n    }\n    return dice;\n};\nconst calculateHighlighted: (dices: number[]) => boolean[] = (dices) => {\n    const result = ([] as boolean[]).fill(false, 0, dices.length);\n    let pos = 0;\n    while (pos < dices.length) {\n        result[pos] = true;\n        pos = pos + dices[pos];\n    }\n\n    return result;\n};\nconst calculateMatch: (originalHighlights: boolean[], highlights: boolean[]) => boolean = (originalHighlights, highlights) => {\n    const lastOriginalHighlight = originalHighlights.lastIndexOf(true);\n    const lastHighlight = highlights.lastIndexOf(true);\n    return lastOriginalHighlight === lastHighlight;\n};\n\nconst calculateFurtherLine: (data: DicesData, startValue: number) => DicesData = (data, startValue)  => {\n    const result: DicesData = {dices: [...data.dices], highlighted: [] as boolean[]};\n    result.dices[0] = startValue;\n    result.highlighted = calculateHighlighted(result.dices);\n    result.matched = calculateMatch(data.highlighted, result.highlighted);\n\n    return result;\n};\n\nexport const Wuerfel: React.FC = () => {\n    const [dicesData, setDicesData] = useState<DicesData>({dices: [], highlighted: [], matched: false});\n\n    const onNumberOfDicesEntered = (numberOfDices: number) => {\n        calculateInitialDices(numberOfDices);\n    };\n\n    const calculateInitialDices = (numberOfDices: number) => {\n        const newDices = rollDice(numberOfDices);\n        setDicesData({dices: newDices, highlighted: calculateHighlighted(newDices)});\n    };\n\n    useEffect(() => {\n        calculateInitialDices(INITIAL_NUMBER_OF_DICES);\n    }, []);\n\n    return (\n        <div className={\"wuerfel-container\"}>\n            <WuerfelInput initialValue={INITIAL_NUMBER_OF_DICES} onNumberOfDicesEntered={onNumberOfDicesEntered}/>\n            <WuerfelLine lineTitle={\"Gewürfelt:\"} dicesData={dicesData}/>\n            {\n                [1,2,3,4,5,6].map((eyes, index) => {\n                    if (eyes !== dicesData.dices[0]) {\n                        const data = calculateFurtherLine(dicesData, eyes);\n                        return <WuerfelLine key={index} lineTitle={\"\"} dicesData={data}/>\n                    }\n\n                    return null;\n                })\n            }\n        </div>\n    );\n};\n\nexport default Wuerfel;\n","import React from 'react';\nimport './App.css';\nimport Wuerfel from \"./Wuerfel\";\n\nexport const App: React.FC = () =>\n    <>\n        <div className={\"App-header\"}>Würfelschlange</div>\n        <div className=\"App flex-container\">\n            <Wuerfel/>\n        </div>\n    </>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}